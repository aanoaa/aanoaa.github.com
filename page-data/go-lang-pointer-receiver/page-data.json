{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/go-lang-pointer-receiver/","result":{"data":{"site":{"siteMetadata":{"title":"Mustache :{","social":[{"name":"rss","url":"https://aanoaa.github.io/rss.xml"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"689b6a4b-2a21-5732-a730-d137a26c290a","excerpt":"golang 을 만지다가 이게 뭔일이여 싶어서..\npointer receiver method 안에서 address 가 아닌 value 로 사용해도 동작한다? https://tour.golang.org/methods/…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"golang pointer receiver\",\n  \"date\": \"2021-01-30T00:00:00.000Z\",\n  \"categories\": \"go pointer receiver\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"golang \\uC744 \\uB9CC\\uC9C0\\uB2E4\\uAC00 \\uC774\\uAC8C \\uBB54\\uC77C\\uC774\\uC5EC \\uC2F6\\uC5B4\\uC11C..\\npointer receiver method \\uC548\\uC5D0\\uC11C address \\uAC00 \\uC544\\uB2CC value \\uB85C \\uC0AC\\uC6A9\\uD574\\uB3C4 \\uB3D9\\uC791\\uD55C\\uB2E4?\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tour.golang.org/methods/4\"\n  }), \"https://tour.golang.org/methods/4\"), \" \\uC5EC\\uAE30\\uC5D0\\uC11C \\uC608\\uC81C\\uB97C \\uBCF4\\uB2C8\\uAE4C pointer receiver \\uBA54\\uC18C\\uB4DC \\uC548\\uC5D0\\uC11C,\\nvalue \\uB97C \\uC0AC\\uC6A9\\uD558\\uAE38\\uB798 \\uC5B4? \\uC774\\uC0C1\\uD558\\uB2E4 \\uD588\\uB294\\uB370 \\uD14C\\uC2A4\\uD2B8\\uD574\\uBCF4\\uB2C8\\uAE4C \\uADF8\\uB7EC\\uD568\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"math\\\"\\n)\\n\\ntype Vertex struct {\\n    X, Y float64\\n}\\n\\nfunc (v Vertex) Abs() float64 {\\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\\n}\\n\\nfunc (v *Vertex) Scale(f float64) {\\n    v.X = v.X * f\\n    v.Y = v.Y * f\\n}\\n\\nfunc main() {\\n    v := Vertex{3, 4}\\n    v.Scale(10)\\n    fmt.Println(v.Abs())\\n}\\n\")), mdx(\"p\", null, \"\\uBAA8\\uB974\\uACA0\\uB294 \\uBD80\\uBD84\\uC740 \\uC5EC\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func (v *Vertex) Scale(f float64) {\\n    v.X = v.X * f\\n    v.Y = v.Y * f\\n\\n    // \\uC65C \\uC774\\uAC8C \\uC544\\uB2C8\\uACE0..\\n    // (*v).X = (*v).X * f\\n    // (*v).Y = (*v).Y * f\\n}\\n\")), mdx(\"p\", null, \"\\uC544\\uB798\\uB294 \\uD14C\\uC2A4\\uD2B8 \\uD574\\uBCF8\\uAC70\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package test\\n\\ntype multiset struct {\\n    values []int\\n}\\n\\n// pointer receiver (1)\\nfunc (m *multiset) append(val int) {\\n    for _, v := range (*m).values {\\n        if v == val {\\n            return\\n        }\\n    }\\n\\n    (*m).values = append((*m).values, val)\\n}\\n\\n// pointer receiver (2)    <- \\uC65C \\uB428?\\nfunc (m *multiset) append(val int) {\\n    for _, v := range m.values {\\n        if v == val {\\n            return\\n        }\\n    }\\n\\n    m.values = append(m.values, val)\\n}\\n\\n// value receiver (3)\\nfunc (m multiset) append(val int) {\\n    for _, v := range m.values {\\n        if v == val {\\n            return\\n        }\\n    }\\n\\n    m.values = append(m.values, val)\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package test\\n\\nimport \\\"fmt\\\"\\n\\nfunc Example_pr() {\\n    var ms multiset\\n    ms = multiset{[]int{1, 2, 3}}\\n    fmt.Println(ms) // 123\\n\\n    ms.append(4)\\n    fmt.Println(ms) // 1234\\n\\n    ms.append(4)\\n    fmt.Println(ms) // 1234\\n\\n    // Output:\\n    // {[1 2 3]}\\n    // {[1 2 3 4]}\\n    // {[1 2 3 4]}\\n}\\n\")), mdx(\"p\", null, \"\\uAC01 \\uCF00\\uC774\\uC2A4 \\uBCC4\\uB85C \\uC704 \\uD14C\\uC2A4\\uD2B8 \\uB3CC\\uB9AC\\uBA74..\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(1) \\uC131\\uACF5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(2) \\uC2E4\\uD328\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(3) \\uC2E4\\uD328\")), mdx(\"p\", null, \"\\uB85C \\uC608\\uC0C1\\uD588\\uB294\\uB370\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(1) \\uC131\\uACF5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(2) \\uC131\\uACF5 <- ???\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(3) \\uC2E4\\uD328\")), mdx(\"p\", null, \"\\uAC00 \\uB428\"), mdx(\"p\", null, \"\\uC65C\\uC8E0?\"), mdx(\"hr\", null), mdx(\"p\", null, \"\\uC774\\uAC83\\uC740 \\uD3EC\\uC778\\uD2B8 \\uB9AC\\uC2DC\\uBC84\\uC640 \\uBB34\\uAD00\\uD558\\uACE0, struct \\uC5D0 \\uB300\\uD55C \\uB0B4\\uC6A9\\uC774\\uB2E4.\\n\\uADF8\\uB9AC\\uACE0 \\uADF8\\uAC83\\uC744 \\uC0AC\\uC6A9\\uD558\\uB294 \\uD45C\\uD604\\uC2DD.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"some := mystruct{}\\n\")), mdx(\"p\", null, \"some \\uC740 struct \\uC758 \\uAC12\\uC778\\uB370, \\uBC30\\uC5F4/\\uC2AC\\uB77C\\uC774\\uC2A4\\uC640 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uB2E4\\uB978 \\uB370\\uC774\\uD130\\uB4E4\\uC758 \\uC9D1\\uD569\\uC744 \\uAC00\\uB9AC\\uD0A4\\uB294 \\uAC12\\uC744 \\uAC00\\uC9C4\\uB2E4.\\n(struct \\uAC00 \\uAE30\\uBCF8\\uC790\\uB8CC\\uD615\\uC758 alias \\uAC00 \\uC544\\uB2C8\\uB77C\\uBA74)\"), mdx(\"p\", null, \"struct \\uC640 struct pointer \\uB458\\uB2E4 dot \\uD45C\\uAE30\\uBC95 \\uC0AC\\uC6A9\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\n\\uBB58 \\uC368\\uC57C \\uB418\\uB294\\uC9C0\\uB294 \\uC544\\uC9C1 \\uBAA8\\uB974\\uACA0\\uC9C0\\uB9CC..\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tour.golang.org/methods/4\"\n  }), \"https://tour.golang.org/methods/4\"), \" \\uC608\\uC81C\\uC5D0\\uC11C\\uB294 \\uAC04\\uACB0\\uD55C \\uD45C\\uD604\\uC744 \\uC704\\uD574\\uC11C\\uC778\\uC9C0 struct \\uC758 value \\uB300\\uC2E0\\uC5D0 struct \\uC758 pointer \\uB97C \\uC0AC\\uC6A9.\"), mdx(\"p\", null, \"\\uC774\\uAC70..\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func (v *Vertex) Scale(f float64) {\\n    v.X = v.X * f\\n    v.Y = v.Y * f\\n}\\n\")), mdx(\"p\", null, \"\\uC5B4\\uB290 \\uAD6C\\uB8E8\\uAED8\\uC11C \\uBA85\\uCF8C\\uD558\\uAC8C \\uC774\\uAC70\\uC368~ \\uD558\\uBA74 \\uADF8\\uAC70 \\uC4F8\\uD150\\uB370 \\uC77C\\uB2E8 \\uC774\\uB807\\uAC8C \\uC368\\uC57C..\"), mdx(\"p\", null, \"\\uC774\\uAC74 caller \\uAC00 struct data type \\uC774 \\uC544\\uB2C8\\uACE0 \\uB0B4\\uBD80 \\uC790\\uB8CC\\uD615\\uC77C\\uB54C\\uC5D0..\\n\\uD5DB\\uAC08\\uB9AC\\uC9C0 \\uC54A\\uB294\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"type myint int\\n\\nfunc (m *myint) increase() myint {\\n    fmt.Println(\\\"  m\\\", m)  //  m 0xc000014168\\n    fmt.Println(\\\" *m\\\", *m) // *m 1\\n    (*m)++\\n    return (*m)\\n}\\n\\nfunc Example_myint() {\\n    var mi myint\\n    mi = myint(1)\\n    fmt.Println(mi)  // 1\\n    fmt.Println(&mi) // 0xc000014168\\n\\n    mi.increase()\\n    fmt.Println(mi) // 2\\n\\n    // Output:\\n    // 1\\n    // 0xc000014168\\n    //   m 0xc000014168\\n    //  *m 1\\n    // 2\\n}\\n\")), mdx(\"p\", null, \"\\uC774\\uAC74 caller \\uAC00 struct data type\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fmt\"), \" \\uC5D0\\uC11C struct \\uC758 address \\uB294 \\uC2E4\\uC81C \\uC8FC\\uC18C\\uB300\\uC2E0\\uC5D0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&{x}\"), \" \\uC774\\uB7F0\\uC2DD\\uC73C\\uB85C \\uD45C\\uD604\\uD574\\uC8FC\\uC5B4\\uC11C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%p\"), \" \\uD3EC\\uB9E4\\uD130\\uB85C \\uD655\\uC778\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"type mystruct struct {\\n    foo int\\n}\\n\\nfunc (m *mystruct) increase() int {\\n    fmt.Printf(\\\"  m %d %p\\\\n\\\", m, m) //  m &{1} 0xc0000a0050\\n    fmt.Println(\\\" *m\\\", *m)          // *m {1}\\n\\n    m.foo++\\n    return m.foo\\n}\\n\\nfunc Example_mystruct() {\\n    var ms mystruct\\n    ms = mystruct{1}\\n    fmt.Println(ms)  // {1}\\n    fmt.Println(&ms) // &{1}\\n\\n    ms.increase()\\n    fmt.Println(ms) // 2\\n\\n    // Output:\\n    // {1}\\n    // &{1}\\n    //   m &{1} 0xc0000a0050\\n    //  *m {1}\\n    // {2}\\n}\\n\")), mdx(\"p\", null, \"struct \\uC758 pointer \\uC640 struct \\uC758 \\uCCAB\\uBC88\\uC9F8 \\uBA64\\uBC84\\uC758 pointer \\uAC00 \\uAC19\\uC74C\\n\\uAC12\\uC740 \\uAC19\\uC9C0\\uB9CC \\uC790\\uB8CC\\uD615\\uC5D0 \\uB530\\uB77C \\uC0AC\\uC6A9\\uBC29\\uBC95\\uC774 \\uB2EC\\uB77C\\uC9D0\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func Example_mystruct2() {\\n    var ms mystruct\\n    ms = mystruct{1}\\n\\n    var msp *mystruct\\n    var foop *int\\n\\n    msp = &ms\\n    foop = &(ms.foo)\\n\\n    fmt.Printf(\\\"%d %p\\\\n\\\", msp, msp)                                // &{1} 0xc0000141a8\\n    fmt.Println(foop)                                              // 0xc0000141a8\\n    fmt.Println(fmt.Sprintf(\\\"%p\\\", msp) == fmt.Sprintf(\\\"%p\\\", foop)) // true\\n\\n    // \\uC77C\\uBC18\\uC801\\uC778 \\uC0AC\\uC6A9\\uBC95\\n    ms.foo++\\n\\n    // compile error! invalid operation\\n    // *msp \\uB294 *foo \\uC640 \\uAC19\\uC9C0\\uB9CC \\uB0B4\\uBD80\\uC5D0 metadata \\uAC00 \\uC788\\uC5B4\\uC11C \\uAD6C\\uBCC4\\uD558\\uB294 \\uB4EF\\n    (*msp)++    // \\uC694\\uAC70 \\uC5D0\\uB7EC\\uB0A8\\n\\n    // msp \\uB294 ms \\uC758 pointer \\uC774\\uC9C0\\uB9CC dot notation \\uC73C\\uB85C \\uC0AC\\uC6A9\\uAC00\\uB2A5\\n    // \\uC65C \\uAC00\\uB2A5? \\uADF8\\uB807\\uAC8C \\uB9CC\\uB4E4\\uC5B4\\uB1A8\\uC73C\\uB2C8\\uAE4C \\uAC00\\uB2A5. \\uC774\\uAC74 \\uB0B4\\uBD80 \\uAD6C\\uD604\\uC744 \\uBAB0\\uB77C\\uC11C \\uB418\\uB294\\uAC11\\uB2E4 \\uD558\\uB2A5..\\n    // pointer reciever method \\uC5D0\\uC11C \\uC774\\uB807\\uAC8C \\uC0AC\\uC6A9\\n    msp.foo++\\n\\n    (*msp).foo++ // \\uC774\\uC81C \\uC774\\uAC8C \\uC694\\uC0C1\\uD574\\uBCF4\\uC774\\uB124..\\n    (*foop)++    // struct \\uB0B4\\uBD80\\uC758 \\uAC12\\uC744 \\uC9C1\\uC811\\uBCC0\\uACBD\\n\\n    fmt.Println(ms)\\n\\n    // Output:\\n    // &{1} 0xc00010c050\\n    // 0xc00010c050\\n    // true\\n    // {5}\\n}\\n\")), mdx(\"p\", null, \"struct \\uC758 pointer \\uC5D0\\uC11C struct \\uCC98\\uB7FC dot notation \\uC744 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4.\\n\\uC815\\uB3C4\\uAC00 \\uB418\\uACA0\\uB2E4.\"), mdx(\"p\", null, \"\\uB2E4\\uB978 \\uC608\\uC678\\uCF00\\uC774\\uC2A4\\uAC00 \\uC788\\uB294\\uC9C0 \\uBAA8\\uB974\\uACA0\\uC9C0\\uB9CC..\"), mdx(\"p\", null, \"\\uCEF4\\uD30C\\uC77C\\uB7EC\\uAC00 \\uC54C\\uC544\\uC11C \\uD574\\uC8FC\\uACA0\\uC9C0.. \\uBBFF\\uC2B5\\uB2C8\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/go-lang-pointer-receiver/","title":"golang pointer receiver","tags":[],"keywords":[],"date":"January 30, 2021","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"5e2de9ab-d013-5f35-9d40-974eeea62939","excerpt":"쇼핑을 거의 안하는(못하는?) 편인데, 미국책이 필요했다. 용사장한테 물어보니까 amazon.com 에서 사면 된다고..\n배달 받으려면 미국식 주소명이 필요해서 https://www.jusoen.com…","slug":"/american-book-order/","title":"미국책 주문","date":"January 15, 2021"},"next":{"__typename":"MdxBlogPost","id":"f6dfc6fe-3d1d-5888-b5eb-2f4a774c69ce","excerpt":"typescript 의 시작을 emacs 로 했었는데, 이때 lsp 을 사용해서 넘 경쾌하게 썼었다.\n근데 IDE 써봐야지 하면서 억지로 vscode 썼는데 이것도 쓰다보니 훌륭. 그러다 보니 go…","slug":"/elisp/","title":"yasnippet 안의 elisp","date":"February 01, 2021"}},"pageContext":{"id":"689b6a4b-2a21-5732-a730-d137a26c290a","previousId":"5e2de9ab-d013-5f35-9d40-974eeea62939","nextId":"f6dfc6fe-3d1d-5888-b5eb-2f4a774c69ce"}},"staticQueryHashes":["386998304","63159454"]}