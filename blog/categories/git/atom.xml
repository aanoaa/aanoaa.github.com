<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Mustache :{]]></title>
  <link href="http://aanoaa.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://aanoaa.github.io/"/>
  <updated>2013-12-23T18:30:40+09:00</updated>
  <id>http://aanoaa.github.io/</id>
  <author>
    <name><![CDATA[Hyungsuk Hong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Private Git Repo With Dropbox]]></title>
    <link href="http://aanoaa.github.io/blog/2013/12/23/private-git-repo-with-dropbox/"/>
    <updated>2013-12-23T18:18:35+09:00</updated>
    <id>http://aanoaa.github.io/blog/2013/12/23/private-git-repo-with-dropbox</id>
    <content type="html"><![CDATA[<p>개인적인 private repo 는 bitbucket 을 사용하고 있었는데, 아래 링크를
보고 Dropbox 를 사용하고 있습니다.</p>

<p><a href="http://mrdanadams.com/2011/github-free-private-git-repositories-dropbox/">Forget github limits: Free private git repositories with Dropbox</a></p>

<p>근데 아쉬운거는 github repo 에는 issue board 도 있어서 프로젝트별로
할일을 관리할 수 있어서 참 좋은데 그런 기능이 필요했습니다.</p>

<p>해서 둘러보던 차에 <a href="http://todotxt.com/">Todo.txt</a> CLI 를 사용해보고
있습니다.</p>

<pre><code># todo.cfg
export TODO_DIR=$HOME/Dropbox/todo/`basename $PWD`
alias t=todo.sh
</code></pre>

<p>요래해서 사용중입니다.</p>

<p>프로젝트 root 에서 밖에 사용못하고 이름 중복에 대응할 순 없지만 아주
만족합니다.</p>

<p><code>Dropbox</code>++, <code>Todo.txt</code>++</p>

<pre><code>$ cd ~/Desktop/t
$ t add '요래 조래'
1 요래 조래
TODO: 1 added.
~/Desktop/t $ t add '이러쿵 저러쿵'
2 이러쿵 저러쿵
TODO: 2 added.
~/Desktop/t $ t add '어쩌고 저쩌고'
3 어쩌고 저쩌고
TODO: 3 added.
~/Desktop/t $ t ls
3 어쩌고 저쩌고
1 요래 조래
2 이러쿵 저러쿵
--
TODO: 3 of 3 tasks shown
~/Desktop/t $ t do 3
3 x 2013-12-23 어쩌고 저쩌고
TODO: 3 marked as done.
x 2013-12-23 어쩌고 저쩌고
TODO: /home/hshong/Dropbox/todo/t/todo.txt archived.
~/Desktop/t $ t ls
1 요래 조래
2 이러쿵 저러쿵
--
TODO: 2 of 2 tasks shown
</code></pre>

<p>뭐 대략 이런느낌</p>

<p>Dropbox 에서 동기화 되기 땜시 다른 PC 로 옮겨서도 같은 프로젝트에서
같은 TODO list 를 관리할 수 있다는게 좋은 것 같습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Push --force]]></title>
    <link href="http://aanoaa.github.io/blog/2012/09/11/git-push-force/"/>
    <updated>2012-09-11T23:28:00+09:00</updated>
    <id>http://aanoaa.github.io/blog/2012/09/11/git-push-force</id>
    <content type="html"><![CDATA[<p>저는 <code>pull-request workflow</code>가 갑이라고 생각합니다.
비동기 방식으로 업무가 진행되고, merge 하기전에 자연스런 review 도
되고요.</p>

<p>근데 궁금한점이 생겻습니다.
이게 말로 한문장으로 설명하기 참 어려워서 예를 들겠습니다.</p>

<p>```bash</p>

<h1>alias.br=branch</h1>

<h1>alias.co=checkout</h1>

<p>$ git br
* master
  topic1
  topic2
```</p>

<p>3개의 브랜치가 있고 이렇게 저렇게 작업해서 각각의 이력은 아래와
같습니다. <code>topic1</code> 과 <code>topic2</code> 가 분기한 시점은 같습니다.</p>

<ul>
<li><code>master</code></li>
</ul>


<p><code>
bfb49285 * [origin/master] [master] init commit
</code></p>

<ul>
<li><code>topic1</code></li>
</ul>


<p><code>
c94f01bb * [origin/topic1] [topic1] add b.c
90d550b0 * add a.c
bfb49285 * [origin/master] [master] init commit
</code></p>

<ul>
<li><code>topic2</code></li>
</ul>


<p><code>
b9f6b81a * [origin/topic2] [topic2] add e.c
95ea73d0 * add d.c
2a44208b * add c.c
bfb49285 * [origin/master] [master] init commit
</code></p>

<p>두개의 <code>topic</code> 모두 <code>pull-request</code> 상태이고(github 을 사용한다고
가정합니다), 매니저가 <code>topic1</code> 을 <em>merge</em> 합니다.</p>

<p>```</p>

<pre><code>ed02ed2e *   [origin/master] [master] Merged in aanoaa/test/topic1 (pull request #1)
         |\  
c94f01bb | * [origin/topic1] [topic1] add b.c
90d550b0 | * add a.c
         |/  
bfb49285 * init commit
</code></pre>

<p>```</p>

<p><code>topic1</code> 이 먼저 <em>merge</em> 되었기에 <code>topic2</code> 에서 <code>master</code> 를 <em>rebase</em>
합니다.</p>

<p>```</p>

<pre><code>963cd74c * [topic2] add e.c
fcaba0cc * add d.c
f28849aa * add c.c
ed02ed2e *   [origin/master] [master] Merged in aanoaa/test/topic1 (pull request #1)
         |\  
c94f01bb | * [origin/topic1] [topic1] add b.c
90d550b0 | * add a.c
         |/  
bfb49285 * init commit
</code></pre>

<p>```</p>

<p><em>rebase</em> 되었기 때문에 <code>topic2</code> 는 <code>origin/topic2 HEAD</code> 를 잃습니다.
이때 <code>push</code> 하게 되면 <code>reject</code> 됩니다.</p>

<p>```</p>

<pre><code>$ git push origin topic2
To ssh://git@example.com/aanoaa/test.git
 ! [rejected]        topic2 -&gt; topic2 (non-fast-forward)
</code></pre>

<p>```</p>

<p>여기서 다른 사람들은 어떻게 처리하는지가 궁금합니다.
두개의 방법이 있을 수 있습니다.</p>

<ul>
<li><code>$ git pull &amp;&amp; git push</code> <em>non-fast-forward</em> 이기 때문에 쉽게 생각할 수
있는 방법입니다.</li>
<li><code>$ git push --force origin topic2</code> remote 의 이력을 바꿔버립니다.</li>
</ul>


<p>첫번째 방법으로 해결했을때는 <code>topic2</code> 에서 작업한 이력이 두번씩 남게
됩니다.</p>

<p>```</p>

<pre><code>9647d196 *   [topic2] Merge branch 'topic2' of ssh://example.com/aanoaa/test into topic2
         |\  
b9f6b81a | * [origin/topic2] add e.c
95ea73d0 | * add d.c
2a44208b | * add c.c
963cd74c * | [ref-topic2] add e.c
fcaba0cc * | add d.c
f28849aa * | add c.c
ed02ed2e * |   [origin/master] [master] Merged in aanoaa/test/topic1 (pull request #1)
         |\ \  
         | |/  
         |/|   
c94f01bb | * [origin/topic1] [topic1] add b.c
90d550b0 | * add a.c
         |/  
bfb49285 * init commit
</code></pre>

<p>```</p>

<p><em>rebase</em> 의 동작방식을 이해한다면 당연한 결과입니다. 마지막의 <em>merge</em>
 커밋도 <em>pull</em> 을 사용했기 때문에 이해할 수 있습니다.</p>

<p>두번째 방식을 사용한다면 아까 <code>topic2</code> 에서 <code>master</code> 를 <em>rebase</em>
했을때의 이력을 가지게 됩니다만 공동작업에서 remote 의 이력을 변경하게
되는 것이라서 부담이 생깁니다.</p>

<p>두개의 결과는 같습니다만 첫번째는 중복된 이력을 가지게 되고, 두번째는
협업간에 불화가 생길 수 있습니다.</p>

<p>어떻게들 사용하시나요?</p>
]]></content>
  </entry>
  
</feed>
