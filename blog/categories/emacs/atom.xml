<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | Mustache :{]]></title>
  <link href="http://aanoaa.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://aanoaa.github.io/"/>
  <updated>2014-02-12T17:38:37+09:00</updated>
  <id>http://aanoaa.github.io/</id>
  <author>
    <name><![CDATA[Hyungsuk Hong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Org-mode]]></title>
    <link href="http://aanoaa.github.io/blog/2012/01/06/org-mode/"/>
    <updated>2012-01-06T14:55:00+09:00</updated>
    <id>http://aanoaa.github.io/blog/2012/01/06/org-mode</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://mail.google.com/mail/help/tasks/">Google tasks</a></li>
<li><a href="http://www.rememberthemilk.com/">remember the milk</a></li>
<li><a href="http://tadalist.com/">Tada list</a></li>
<li><a href="https://trello.com/">trello</a></li>
<li><a href="https://workflowy.com/">workflowy</a></li>
<li>그냥 <code>excel</code></li>
</ul>


<p>제가 그간 거쳐왔던 훌륭한 task 관리 툴입니다.
근데 저는 몇일 쓰다보면 못쓰겟더라고요.</p>

<p>그리고 얼마전에 emacs <code>org-mode</code> 라는 것을 알게 되었습니다. org-mode
참 좋습니다. pdf, excel, plain/text, html, latex, .. 으로 export 되고
단축키로 뿅뿅 눌러서 TODO 관리도 할 수 있고 emacs 안에서, 오프라인에서
일정관리도 되고, 태그도 되고, 해야할 일을 쉽게 내 todo 에 올릴 수도
있고요..</p>

<p>기능도 많고 안되는게 없고 문서화도 아주 잘되어 있습니다 android,
iphone app 도 있습니다. 근데 배우고 알아야 할게 너무 많습니다.</p>

<p>되돌아 보면, github issue 만 사용할때 가장 업무 효율이 높았던 것
같습니다.</p>

<p>github 만세입니다.</p>

<h3>결론은 버킹검</h3>

<p>아아 뭔소리래..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Mo-git-blame Mode]]></title>
    <link href="http://aanoaa.github.io/blog/2011/12/02/emacs-mo-git-blame-mode/"/>
    <updated>2011-12-02T15:07:00+09:00</updated>
    <id>http://aanoaa.github.io/blog/2011/12/02/emacs-mo-git-blame-mode</id>
    <content type="html"><![CDATA[<h2>프로젝트 환경</h2>

<p><a href="http://www.facebook.com/silexkr">silex</a>라는 조그마한 회사를 댕기고 있습니다.</p>

<p>소스관리는 <a href="http://git-scm.com/">git</a>사용하고 있고요, 내부에도 <a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way">gitosis</a>를
운영하고 있긴 하지만, 주요 프로젝트는 <a href="https://github.com/">github</a> 유료 서비스를
사용하고 있습니다. 이슈 관리도 <a href="https://github.com/">github</a>에서
합니다. (버그질라를 사용하는 프로젝트도 있습니다)</p>

<h2>코드리뷰</h2>

<p>아주 느슨합니다.
repo 접근 권한이 있다면 누구나 commit, push 할 수 있습니다.
코드 리뷰는 push후에 프로젝트 참여자가 알아서 합니다.</p>

<blockquote><p>이건 요래서 그지같고, 저건 조래서 다시해라, 발로 썻냐 등등..</p></blockquote>

<p>좋은 얘기도 합니다만, 지적질이 대세를 이루죠.</p>

<p>몇일전에는 바로 옆에서 <a href="https://twitter.com/#!/jeen_lee">jeen</a>님이 그지같이 썻다고 해서
소주병 나발을 불기도 하고 뭐 그랬습니다.</p>

<h2>git blame</h2>

<p>누가 무슨 짓 했는지 다 알 수 있습니다.</p>

<pre><code>519aaa9b (yongbin       2011-07-23 23:23:33 +0900 1) #!/bin/sh
686cb0fb (Yongbin Yu    2011-09-24 15:58:03 +0900 2) TRUNNER_CONFDIR=t/selenium \
2b3e6736 (Hyungsuk Hong 2011-10-13 11:25:22 +0900 3) plackup -Ilib -s Starman -p 3000 -a best_web.psgi --access-log /dev/null
</code></pre>

<h2>문제점 그리고 새로운 인력의 투입</h2>

<ul>
<li>push 했을때 review 하지 못하고 그냥 넘길때가 있습니다(많습니다)</li>
<li>프로젝트 중간에 커밋터 보급받았을때</li>
</ul>


<p>남이 써놓은 코드를 열었는데 그지 같으면 말해줘서 바로 잡아야 합니다.
쓰다보니 거지 같아서 <code>git blame</code>으로 살폈는데 제 코드일 수도 있습니다.</p>

<p>뭐 어찌됐든 이 일련의 과정을 커맨트라인으로 하려면 불편합니다.</p>

<pre><code>while(1) {
    $ git blame oops
    $ git log 72ddf38
}
</code></pre>

<h2><a href="http://www.vim.org/">vim</a> vs <a href="http://www.gnu.org/s/emacs/">emacs</a></h2>

<blockquote><p>@JEEN_LEE,  about 2 hours ago:
  예를 들어 vim 으로 특정 코드부분을 주시한다고 할 때, 어.. 이거 누가
  고쳤지 하는 부분이 있는데... 그때마다 blame 으로 파일을 지정해서
  찾아보는 데, 그 라인에서 어떻게 바로 뿅하고
  알 수 있게끔 하는 거 없을까.. // from Twitter for iPhone [Seoul,
  Korea]</p></blockquote>

<p>조금 찾아 봤는데 뭐 그런거 없습니다.</p>

<blockquote><p>@semtlnori,  18 minutes ago:
  @JEEN_LEE :exe "!git blame -L".line(".").",".line(".")." -- %" 이거
  단축키 바인딩해서 쓰는 방법도 대충 될듯요. // from web [Seoul] in
  reply to JEEN_LEE</p></blockquote>

<p>@semtlnori: ㄱㅅ</p>

<p>회사에서 저만 <a href="http://www.gnu.org/s/emacs/">emacs</a>씁니다.
<code>해서</code>, 찾아봤더니 <a href="https://github.com/voins/mo-git-blame">mo-git-blame</a>이 있었습니다.</p>

<h2>mo-git-blame</h2>

<h3>설치</h3>

<p><code>.emacs.d/vendor/mo-git-blame/mo-git-blame.el</code>을 두었습니다.</p>

<h3>설정</h3>

<pre><code>;; mo-git-blame
(add-to-list 'load-path "~/.emacs.d/vendor/mo-git-blame")
(require 'mo-git-blame)
(global-set-key [?\C-c ?g ?c] 'mo-git-blame-current)
(global-set-key [?\C-c ?g ?f] 'mo-git-blame-file)
</code></pre>

<h3>사용법</h3>

<ul>
<li>파일을 열고 작업을 합니다.</li>
<li>거지같은 코드를 발견합니다.</li>
<li><code>C-c g c</code>(command git current 의 약자인듯..)</li>
<li><p>커맨드를 마구마구 입력하면서 확인합니다.</p>

<pre><code>TAB
l
s
Ctrl + n
Ctrl + n
Ctrl + n
TAB
l
...
</code></pre></li>
<li><p>내가 했던거면 말없이 수정하고, 남이 한거면 <em>Scratch</em> 에 메세지를
남겨두거나 바로 지적질 합니다.(아직 어케 할지 몰겟네요)</p></li>
</ul>


<h2>캡쳐화면</h2>

<p><img src="http://k.minus.com/jwKlv6EpzfEwJ.png">
<img src="http://k.minus.com/jIDbCjAJe4qWD.png">
<img src="http://k.minus.com/jG5TPNm1TKCVP.png"></p>

<h1>결론</h1>

<h1>vim 이 뭐져?</h1>
]]></content>
  </entry>
  
</feed>
